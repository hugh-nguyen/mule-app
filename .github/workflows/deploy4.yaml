name: DEPLOY4

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ──────────────────────────────────────────────────────────────────────────────
# CONSTANTS you're unlikely to change often
# ──────────────────────────────────────────────────────────────────────────────
env:
  APP_NAME: mule-service
  RUNTIME_VERSION: 4.4.0
  REGION: ap-southeast-2
  WORKER_SIZE: CH2_MEDIUM
  REPLICAS: 1
  GROUP_ID: com.example
  ASSET_ID: mule-service
  VERSION: 0.0.1

  # ——— IDs from the screenshot ———————————————————————————
  ANYPOINT_ORG: ed678fab-d850-43e4-86b8-1c7ccfbc907a     #  Business‑group ID
  ANYPOINT_ENV: a30fae48-ce0e-4371-9fc6-ff8c0d2d7252     #  Environment  ID
  # ————————————————————————————————————————————————————

jobs:
# ╔══════════════════════════════════════════════════════════════════════════╗
# ║ 1)  Build the Mule application                                          ║
# ╚══════════════════════════════════════════════════════════════════════════╝
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8 + Maven 3.9
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
          cache: maven

      - name: Build Mule application
        run: mvn -B clean package -DmuleDeploy

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: mule-app
          path: target/*.jar
          if-no-files-found: error

      - name: Upload POM artifact
        uses: actions/upload-artifact@v4
        with:
          name: pom-file
          path: pom.xml

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║ 2)  Upload to Exchange and Deploy to CloudHub 2.0                       ║
# ╚══════════════════════════════════════════════════════════════════════════╝
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production          # optional GitHub env for approvals

    # ▸  Credentials are injected as environment variables so every CLI call
    #    sees them automatically (no interactive prompts).
    env:
      ANYPOINT_CLIENT_ID:     ${{ secrets.ANYPOINT_CLIENT_ID }}
      ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
      ANYPOINT_ORG: ed678fab-d850-43e4-86b8-1c7ccfbc907a
      ANYPOINT_ENV: Sandbox 

      APP_NAME: mule-service
      RUNTIME_VERSION: 4.4.0
      REPLICAS: 1

      DEPLOYMENT_TARGET_ID: 14ea2e0c-40a3-44c0-8d25-2a8e6020a19d
      REGION: ap-southeast-2

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: mule-app
          path: ./artifacts

      - name: Download POM file
        uses: actions/download-artifact@v4
        with:
          name: pom-file
          path: ./

      - name: Install Anypoint CLI
        run: npm install -g anypoint-cli-v4
      
      - name: Upload to Exchange using curl
        run: |
          # Find the JAR file
          JAR_FILE=$(find ./artifacts -name "*.jar" -type f | grep -v "original")
          
          # Create a ZIP file containing the JAR
          mkdir -p temp_upload
          cp "$JAR_FILE" temp_upload/
          cd temp_upload
          zip app.zip *.jar
          cd ..
          
          echo "Creating access token..."
          # Get access token using client credentials
          TOKEN_RESPONSE=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
            -H "Content-Type: application/json" \
            -d '{
              "client_id": "'$ANYPOINT_CLIENT_ID'",
              "client_secret": "'$ANYPOINT_CLIENT_SECRET'",
              "grant_type": "client_credentials"
            }')
          
          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"access_token":"[^"]*' | sed 's/"access_token":"//')
          
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to get access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "Uploading to Exchange..."
          UPLOAD_RESPONSE=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "x-sync-publication: true" \
            -F "files.pom=@pom.xml" \
            -F "files.zip=@temp_upload/app.zip" \
            "https://anypoint.mulesoft.com/exchange/api/v2/organizations/$ANYPOINT_ORG/assets/$ANYPOINT_ORG/$ASSET_ID/$VERSION")
          
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPLOAD_RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [[ "$HTTP_CODE" != "201" ]]; then
            echo "Failed to upload to Exchange"
            exit 1
          fi
          
          echo "Successfully uploaded to Exchange"

      - name: Verify upload by listing Exchange assets
        run: |
          anypoint-cli-v4 exchange:asset:list --organization "$ANYPOINT_ORG"

      - name: Deploy from Exchange to CloudHub 2.0
        run: |
          echo "Deploying $APP_NAME from Exchange to CloudHub 2.0 …"

          anypoint-cli-v4 runtime-mgr application deploy \
            "$APP_NAME" \
            "$DEPLOYMENT_TARGET_ID" \
            "$RUNTIME_VERSION" \
            "$ASSET_ID" \
            --organization "$ANYPOINT_ORG" \
            --environment "$ANYPOINT_ENV" \
            --groupId "$ANYPOINT_ORG" \
            --assetVersion "$VERSION" \
            --replicas "$REPLICAS"